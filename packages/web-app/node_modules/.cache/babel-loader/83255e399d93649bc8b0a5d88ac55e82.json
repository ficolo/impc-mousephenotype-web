{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React, { useState } from \"react\";\nimport { scaleOrdinal } from \"@visx/scale\";\nimport { AnimatedAxis, AnimatedGrid, XYChart, Tooltip, AnimatedGlyphSeries, buildChartTheme, AnimatedLineSeries } from \"@visx/xychart\";\nimport { LegendItem, LegendLabel, LegendOrdinal } from \"@visx/legend\";\nimport { GlyphCircle, GlyphSquare, GlyphTriangle } from \"@visx/glyph\";\nimport \"./ScatterPlot.css\";\nimport { ParentSize } from \"@visx/responsive\";\nconst legendGlyphSize = 20;\nconst accessors = {\n  xAccessor: d => d ? new Date(d.x) : new Date(),\n  yAccessor: d => d.y\n};\nexport const ScatterPlot = props => {\n  const {\n    xAxisLabel,\n    yAxisLabel,\n    series,\n    window\n  } = props;\n  const seriesNames = series.map(({\n    seriesName\n  }) => seriesName);\n\n  if (window) {\n    seriesNames.push(\"Window\");\n  }\n\n  const [activeSeries, setActiveSeries] = useState(seriesNames);\n  const colorScale = scaleOrdinal({\n    domain: seriesNames,\n    range: seriesNames.map(seriesName => {\n      if (seriesName === \"Window\") {\n        return \"rgba(124, 124, 124, 0.5)\";\n      } else if (seriesName.includes(\"WT\")) {\n        return \"rgba(9, 120, 161, 0.5)\";\n      }\n\n      return \"rgba(239, 123, 11, 0.5)\";\n    })\n  });\n  const shapeScale = scaleOrdinal({\n    domain: seriesNames,\n    range: seriesNames.map(seriesName => {\n      if (seriesName === \"Window\") {\n        return _jsx(GlyphSquare, {\n          fill: colorScale(seriesName),\n          stroke: colorScale(seriesName)\n        }, seriesName);\n      }\n\n      if (seriesName.includes(\"Female\")) {\n        return _jsx(GlyphCircle, {\n          fill: colorScale(seriesName),\n          stroke: colorScale(seriesName)\n        }, seriesName);\n      } else {\n        return _jsx(GlyphTriangle, {\n          fill: colorScale(seriesName),\n          stroke: colorScale(seriesName)\n        }, seriesName);\n      }\n    })\n  });\n  const customTheme = buildChartTheme({\n    backgroundColor: \"white\",\n    colors: colorScale.range(),\n    tickLength: 5,\n    gridColor: \"gray\",\n    gridColorDark: \"\",\n    gridStyles: {\n      strokeWidth: 1\n    }\n  });\n  return _jsxs(\"div\", {\n    children: [_jsx(ParentSize, {\n      children: parent => {\n        return _jsxs(XYChart, Object.assign({\n          height: 300,\n          width: parent.width - 20,\n          xScale: {\n            type: \"time\",\n            clamp: true,\n            nice: true\n          },\n          yScale: {\n            type: \"linear\",\n            nice: true\n          },\n          theme: customTheme\n        }, {\n          children: [_jsx(AnimatedAxis, {\n            orientation: \"bottom\",\n            label: xAxisLabel,\n            hideZero: true\n          }, void 0), _jsx(AnimatedAxis, {\n            orientation: \"left\",\n            label: yAxisLabel,\n            hideZero: true\n          }, void 0), _jsx(AnimatedGrid, {\n            columns: false,\n            numTicks: 4,\n            lineStyle: {\n              strokeWidth: \"1px\",\n              stroke: \"lightgray\"\n            }\n          }, void 0), series.map(series => _jsx(AnimatedGlyphSeries, Object.assign({\n            dataKey: series.seriesName,\n            data: activeSeries.includes(series.seriesName) ? series.data : []\n          }, accessors, {\n            renderGlyph: () => shapeScale(series.seriesName)\n          }), series.seriesName)), window ? _jsx(AnimatedLineSeries, Object.assign({\n            dataKey: \"Window\",\n            data: activeSeries.includes(\"Window\") ? window : [],\n            stroke: colorScale(\"Window\")\n          }, accessors), void 0) : null, _jsx(Tooltip, {\n            snapTooltipToDatumX: true,\n            snapTooltipToDatumY: true,\n            showDatumGlyph: true,\n            showVerticalCrosshair: true,\n            renderTooltip: ({\n              tooltipData,\n              colorScale\n            }) => {\n              if (tooltipData?.nearestDatum?.key === \"Window\") {\n                return;\n              }\n\n              if (tooltipData && tooltipData.nearestDatum && tooltipData.nearestDatum.datum && colorScale) {\n                return _jsxs(\"div\", {\n                  children: [_jsx(\"div\", Object.assign({\n                    style: {\n                      color: colorScale(tooltipData.nearestDatum.key)\n                    }\n                  }, {\n                    children: tooltipData.nearestDatum.key\n                  }), void 0), accessors.xAccessor(tooltipData.nearestDatum.datum).toDateString(), \", \", accessors.yAccessor(tooltipData.nearestDatum.datum)]\n                }, void 0);\n              }\n\n              return;\n            }\n          }, void 0)]\n        }), void 0);\n      }\n    }, void 0), _jsx(\"div\", Object.assign({\n      style: {\n        width: \"100%\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        fontSize: \"14px\"\n      }\n    }, {\n      children: _jsx(LegendOrdinal, Object.assign({\n        scale: shapeScale,\n        direction: \"row\",\n        shapeHeight: legendGlyphSize,\n        shapeWidth: legendGlyphSize,\n        labelMargin: \"10px\",\n        labelAlign: \"center\"\n      }, {\n        children: labels => labels.map(label => {\n          const shape = shapeScale(label.datum);\n          const isValidElement = React.isValidElement(shape);\n          const color = colorScale(label.datum);\n          const legendGlyphConfig = {\n            fill: activeSeries.includes(label.text) ? color : \"#ffffff\",\n            top: legendGlyphSize / 2,\n            left: legendGlyphSize / 2\n          };\n          return _jsxs(LegendItem, Object.assign({\n            onClick: () => {\n              if (activeSeries.includes(label.text)) {\n                setActiveSeries(activeSeries.filter(s => s !== label.text));\n              } else {\n                setActiveSeries(activeSeries.concat([label.text]));\n              }\n            }\n          }, {\n            children: [_jsx(\"svg\", Object.assign({\n              width: legendGlyphSize,\n              height: legendGlyphSize,\n              cursor: \"pointer\"\n            }, {\n              children: isValidElement ? React.cloneElement(shape, legendGlyphConfig) : React.createElement(shape, legendGlyphConfig)\n            }), void 0), _jsx(LegendLabel, Object.assign({\n              className: activeSeries.includes(label.text) ? \"text-dark\" : \"text-muted\",\n              style: {\n                cursor: \"pointer\"\n              }\n            }, {\n              children: label.text\n            }), void 0)]\n          }), label.text);\n        })\n      }), void 0)\n    }), void 0)]\n  }, void 0);\n};","map":{"version":3,"sources":["../../src/charts/ScatterPlot.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React, { useState } from \"react\";\nimport { scaleOrdinal } from \"@visx/scale\";\nimport { AnimatedAxis, AnimatedGrid, XYChart, Tooltip, AnimatedGlyphSeries, buildChartTheme, AnimatedLineSeries, } from \"@visx/xychart\";\nimport { LegendItem, LegendLabel, LegendOrdinal } from \"@visx/legend\";\nimport { GlyphCircle, GlyphSquare, GlyphTriangle } from \"@visx/glyph\";\nimport \"./ScatterPlot.css\";\nimport { ParentSize } from \"@visx/responsive\";\nconst legendGlyphSize = 20;\nconst accessors = {\n    xAccessor: (d) => (d ? new Date(d.x) : new Date()),\n    yAccessor: (d) => d.y,\n};\nexport const ScatterPlot = (props) => {\n    const { xAxisLabel, yAxisLabel, series, window } = props;\n    const seriesNames = series.map(({ seriesName }) => seriesName);\n    if (window) {\n        seriesNames.push(\"Window\");\n    }\n    const [activeSeries, setActiveSeries] = useState(seriesNames);\n    const colorScale = scaleOrdinal({\n        domain: seriesNames,\n        range: seriesNames.map((seriesName) => {\n            if (seriesName === \"Window\") {\n                return \"rgba(124, 124, 124, 0.5)\";\n            }\n            else if (seriesName.includes(\"WT\")) {\n                return \"rgba(9, 120, 161, 0.5)\";\n            }\n            return \"rgba(239, 123, 11, 0.5)\";\n        }),\n    });\n    const shapeScale = scaleOrdinal({\n        domain: seriesNames,\n        range: seriesNames.map((seriesName) => {\n            if (seriesName === \"Window\") {\n                return (_jsx(GlyphSquare, { fill: colorScale(seriesName), stroke: colorScale(seriesName) }, seriesName));\n            }\n            if (seriesName.includes(\"Female\")) {\n                return (_jsx(GlyphCircle, { fill: colorScale(seriesName), stroke: colorScale(seriesName) }, seriesName));\n            }\n            else {\n                return (_jsx(GlyphTriangle, { fill: colorScale(seriesName), stroke: colorScale(seriesName) }, seriesName));\n            }\n        }),\n    });\n    const customTheme = buildChartTheme({\n        backgroundColor: \"white\",\n        colors: colorScale.range(),\n        tickLength: 5,\n        gridColor: \"gray\",\n        gridColorDark: \"\",\n        gridStyles: {\n            strokeWidth: 1,\n        },\n    });\n    return (_jsxs(\"div\", { children: [_jsx(ParentSize, { children: (parent) => {\n                    return (_jsxs(XYChart, Object.assign({ height: 300, width: parent.width - 20, xScale: {\n                            type: \"time\",\n                            clamp: true,\n                            nice: true,\n                        }, yScale: { type: \"linear\", nice: true }, theme: customTheme }, { children: [_jsx(AnimatedAxis, { orientation: \"bottom\", label: xAxisLabel, hideZero: true }, void 0),\n                            _jsx(AnimatedAxis, { orientation: \"left\", label: yAxisLabel, hideZero: true }, void 0),\n                            _jsx(AnimatedGrid, { columns: false, numTicks: 4, lineStyle: { strokeWidth: \"1px\", stroke: \"lightgray\" } }, void 0),\n                            series.map((series) => (_jsx(AnimatedGlyphSeries, Object.assign({ dataKey: series.seriesName, data: activeSeries.includes(series.seriesName) ? series.data : [] }, accessors, { renderGlyph: () => shapeScale(series.seriesName) }), series.seriesName))),\n                            window ? (_jsx(AnimatedLineSeries, Object.assign({ dataKey: \"Window\", data: activeSeries.includes(\"Window\") ? window : [], stroke: colorScale(\"Window\") }, accessors), void 0)) : null,\n                            _jsx(Tooltip, { snapTooltipToDatumX: true, snapTooltipToDatumY: true, showDatumGlyph: true, showVerticalCrosshair: true, renderTooltip: ({ tooltipData, colorScale }) => {\n                                    if (tooltipData?.nearestDatum?.key === \"Window\") {\n                                        return;\n                                    }\n                                    if (tooltipData &&\n                                        tooltipData.nearestDatum &&\n                                        tooltipData.nearestDatum.datum &&\n                                        colorScale) {\n                                        return (_jsxs(\"div\", { children: [_jsx(\"div\", Object.assign({ style: {\n                                                        color: colorScale(tooltipData.nearestDatum.key),\n                                                    } }, { children: tooltipData.nearestDatum.key }), void 0),\n                                                accessors\n                                                    .xAccessor(tooltipData.nearestDatum.datum)\n                                                    .toDateString(), \", \", accessors.yAccessor(tooltipData.nearestDatum.datum)] }, void 0));\n                                    }\n                                    return;\n                                } }, void 0)] }), void 0));\n                } }, void 0),\n            _jsx(\"div\", Object.assign({ style: {\n                    width: \"100%\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    fontSize: \"14px\",\n                } }, { children: _jsx(LegendOrdinal, Object.assign({ scale: shapeScale, direction: \"row\", shapeHeight: legendGlyphSize, shapeWidth: legendGlyphSize, labelMargin: \"10px\", labelAlign: \"center\" }, { children: (labels) => labels.map((label) => {\n                        const shape = shapeScale(label.datum);\n                        const isValidElement = React.isValidElement(shape);\n                        const color = colorScale(label.datum);\n                        const legendGlyphConfig = {\n                            fill: activeSeries.includes(label.text) ? color : \"#ffffff\",\n                            top: legendGlyphSize / 2,\n                            left: legendGlyphSize / 2,\n                        };\n                        return (_jsxs(LegendItem, Object.assign({ onClick: () => {\n                                if (activeSeries.includes(label.text)) {\n                                    setActiveSeries(activeSeries.filter((s) => s !== label.text));\n                                }\n                                else {\n                                    setActiveSeries(activeSeries.concat([label.text]));\n                                }\n                            } }, { children: [_jsx(\"svg\", Object.assign({ width: legendGlyphSize, height: legendGlyphSize, cursor: \"pointer\" }, { children: isValidElement\n                                        ? React.cloneElement(shape, legendGlyphConfig)\n                                        : React.createElement(shape, legendGlyphConfig) }), void 0),\n                                _jsx(LegendLabel, Object.assign({ className: activeSeries.includes(label.text)\n                                        ? \"text-dark\"\n                                        : \"text-muted\", style: { cursor: \"pointer\" } }, { children: label.text }), void 0)] }), label.text));\n                    }) }), void 0) }), void 0)] }, void 0));\n};\n//# sourceMappingURL=ScatterPlot.js.map"]},"metadata":{},"sourceType":"module"}