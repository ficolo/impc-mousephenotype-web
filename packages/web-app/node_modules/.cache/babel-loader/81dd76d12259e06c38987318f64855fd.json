{"ast":null,"code":"function calcMedian(dataSet) {\n  var half = Math.floor(dataSet.length / 2);\n  if (dataSet.length % 2) return dataSet[half];\n  return (dataSet[half - 1] + dataSet[half]) / 2;\n}\n\nexport default function computeStats(numericalArray) {\n  var points = [].concat(numericalArray).sort(function (a, b) {\n    return a - b;\n  });\n  var sampleSize = points.length;\n  var median = calcMedian(points); // calculate median of first half i.e. firstQuartile\n\n  var lowerHalfLength = Math.floor(sampleSize / 2);\n  var lowerHalf = points.slice(0, lowerHalfLength);\n  var firstQuartile = calcMedian(lowerHalf); // calculate median of first half i.e. secondQuartile\n\n  var upperHalfLength = Math.ceil(sampleSize / 2);\n  var upperHalf = points.slice(upperHalfLength);\n  var thirdQuartile = calcMedian(upperHalf);\n  var IQR = thirdQuartile - firstQuartile;\n  var min = firstQuartile - 1.5 * IQR;\n  var max = thirdQuartile + 1.5 * IQR;\n  var outliers = points.filter(function (p) {\n    return p < min || p > max;\n  });\n\n  if (outliers.length === 0) {\n    min = Math.min.apply(Math, points);\n    max = Math.max.apply(Math, points);\n  }\n\n  var binWidth = 2 * IQR * Math.pow(sampleSize - outliers.length, -1 / 3);\n  var binCount = Math.round((max - min) / binWidth);\n  var actualBinWidth = (max - min) / binCount;\n  var bins = new Array(binCount + 2).fill(0);\n  var values = new Array(binCount + 2).fill(min);\n\n  for (var i = 1; i <= binCount; i += 1) {\n    values[i] += actualBinWidth * (i - 0.5);\n  }\n\n  values[values.length - 1] = max;\n  points.filter(function (p) {\n    return p >= min && p <= max;\n  }).forEach(function (p) {\n    bins[Math.floor((p - min) / actualBinWidth) + 1] += 1;\n  });\n  var binData = values.map(function (v, i) {\n    return {\n      value: v,\n      count: bins[i]\n    };\n  });\n  var boxPlot = {\n    min: min,\n    firstQuartile: firstQuartile,\n    median: median,\n    thirdQuartile: thirdQuartile,\n    max: max,\n    outliers: outliers\n  };\n  return {\n    boxPlot: boxPlot,\n    binData: binData\n  };\n}","map":{"version":3,"sources":["/Users/federico/git/test/impc-mousephenotype-web/node_modules/@visx/stats/esm/util/computeStats.js"],"names":["calcMedian","dataSet","half","Math","floor","length","computeStats","numericalArray","points","concat","sort","a","b","sampleSize","median","lowerHalfLength","lowerHalf","slice","firstQuartile","upperHalfLength","ceil","upperHalf","thirdQuartile","IQR","min","max","outliers","filter","p","apply","binWidth","pow","binCount","round","actualBinWidth","bins","Array","fill","values","i","forEach","binData","map","v","value","count","boxPlot"],"mappings":"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","sourcesContent":["function calcMedian(dataSet) {\n  var half = Math.floor(dataSet.length / 2);\n  if (dataSet.length % 2) return dataSet[half];\n  return (dataSet[half - 1] + dataSet[half]) / 2;\n}\n\nexport default function computeStats(numericalArray) {\n  var points = [].concat(numericalArray).sort(function (a, b) {\n    return a - b;\n  });\n  var sampleSize = points.length;\n  var median = calcMedian(points); // calculate median of first half i.e. firstQuartile\n\n  var lowerHalfLength = Math.floor(sampleSize / 2);\n  var lowerHalf = points.slice(0, lowerHalfLength);\n  var firstQuartile = calcMedian(lowerHalf); // calculate median of first half i.e. secondQuartile\n\n  var upperHalfLength = Math.ceil(sampleSize / 2);\n  var upperHalf = points.slice(upperHalfLength);\n  var thirdQuartile = calcMedian(upperHalf);\n  var IQR = thirdQuartile - firstQuartile;\n  var min = firstQuartile - 1.5 * IQR;\n  var max = thirdQuartile + 1.5 * IQR;\n  var outliers = points.filter(function (p) {\n    return p < min || p > max;\n  });\n\n  if (outliers.length === 0) {\n    min = Math.min.apply(Math, points);\n    max = Math.max.apply(Math, points);\n  }\n\n  var binWidth = 2 * IQR * Math.pow(sampleSize - outliers.length, -1 / 3);\n  var binCount = Math.round((max - min) / binWidth);\n  var actualBinWidth = (max - min) / binCount;\n  var bins = new Array(binCount + 2).fill(0);\n  var values = new Array(binCount + 2).fill(min);\n\n  for (var i = 1; i <= binCount; i += 1) {\n    values[i] += actualBinWidth * (i - 0.5);\n  }\n\n  values[values.length - 1] = max;\n  points.filter(function (p) {\n    return p >= min && p <= max;\n  }).forEach(function (p) {\n    bins[Math.floor((p - min) / actualBinWidth) + 1] += 1;\n  });\n  var binData = values.map(function (v, i) {\n    return {\n      value: v,\n      count: bins[i]\n    };\n  });\n  var boxPlot = {\n    min: min,\n    firstQuartile: firstQuartile,\n    median: median,\n    thirdQuartile: thirdQuartile,\n    max: max,\n    outliers: outliers\n  };\n  return {\n    boxPlot: boxPlot,\n    binData: binData\n  };\n}"]},"metadata":{},"sourceType":"module"}