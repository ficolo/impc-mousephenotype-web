{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = genStats;\n\nvar _d3Random = require(\"d3-random\");\n\nvar defaultRandom = (0, _d3Random.randomNormal)(4, 3);\n\nvar defaultRandomOffset = function defaultRandomOffset() {\n  return Math.random() * 10;\n};\n\nvar sampleSize = 1000;\n\nfunction genStats(\n/** Number of stat distributions to generate. */\nnumber,\n/** Function which generates a random number. */\nrandom,\n/** Function which generates an offset for each data point / invocation of random. */\nrandomOffset) {\n  if (random === void 0) {\n    random = defaultRandom;\n  }\n\n  if (randomOffset === void 0) {\n    randomOffset = defaultRandomOffset;\n  }\n\n  var data = [];\n\n  var _loop = function _loop(i) {\n    var points = [];\n    var offset = randomOffset();\n\n    for (var j = 0; j < sampleSize; j += 1) {\n      points.push(offset + random());\n    }\n\n    points.sort(function (a, b) {\n      return a - b;\n    });\n    var firstQuartile = points[Math.round(sampleSize / 4)];\n    var thirdQuartile = points[Math.round(3 * sampleSize / 4)];\n    var IQR = thirdQuartile - firstQuartile;\n    var min = firstQuartile - 1.5 * IQR;\n    var max = thirdQuartile + 1.5 * IQR;\n    var outliers = points.filter(function (p) {\n      return p < min || p > max;\n    });\n    var binWidth = 2 * IQR * Math.pow(sampleSize - outliers.length, -1 / 3);\n    var binNum = Math.round((max - min) / binWidth);\n    var actualBinWidth = (max - min) / binNum;\n    var bins = new Array(binNum + 2).fill(0);\n    var values = new Array(binNum + 2).fill(min);\n\n    for (var ii = 1; ii <= binNum; ii += 1) {\n      values[ii] += actualBinWidth * (ii - 0.5);\n    }\n\n    values[values.length - 1] = max;\n    points.filter(function (p) {\n      return p >= min && p <= max;\n    }).forEach(function (p) {\n      bins[Math.floor((p - min) / actualBinWidth) + 1] += 1;\n    });\n    var binData = values.map(function (v, index) {\n      return {\n        value: v,\n        count: bins[index]\n      };\n    });\n    var boxPlot = {\n      x: \"Statistics \" + i,\n      min: min,\n      firstQuartile: firstQuartile,\n      median: points[Math.round(sampleSize / 2)],\n      thirdQuartile: thirdQuartile,\n      max: max,\n      outliers: outliers\n    };\n    data.push({\n      boxPlot: boxPlot,\n      binData: binData\n    });\n  };\n\n  for (var i = 0; i < number; i += 1) {\n    _loop(i);\n  }\n\n  return data;\n}","map":{"version":3,"sources":["/Users/federico/git/test/impc-mousephenotype-web/node_modules/@visx/mock-data/lib/generators/genStats.js"],"names":["exports","__esModule","default","genStats","_d3Random","require","defaultRandom","randomNormal","defaultRandomOffset","Math","random","sampleSize","number","randomOffset","data","_loop","i","points","offset","j","push","sort","a","b","firstQuartile","round","thirdQuartile","IQR","min","max","outliers","filter","p","binWidth","pow","length","binNum","actualBinWidth","bins","Array","fill","values","ii","forEach","floor","binData","map","v","index","value","count","boxPlot","x","median"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = genStats;\n\nvar _d3Random = require(\"d3-random\");\n\nvar defaultRandom = (0, _d3Random.randomNormal)(4, 3);\n\nvar defaultRandomOffset = function defaultRandomOffset() {\n  return Math.random() * 10;\n};\n\nvar sampleSize = 1000;\n\nfunction genStats(\n/** Number of stat distributions to generate. */\nnumber,\n/** Function which generates a random number. */\nrandom,\n/** Function which generates an offset for each data point / invocation of random. */\nrandomOffset) {\n  if (random === void 0) {\n    random = defaultRandom;\n  }\n\n  if (randomOffset === void 0) {\n    randomOffset = defaultRandomOffset;\n  }\n\n  var data = [];\n\n  var _loop = function _loop(i) {\n    var points = [];\n    var offset = randomOffset();\n\n    for (var j = 0; j < sampleSize; j += 1) {\n      points.push(offset + random());\n    }\n\n    points.sort(function (a, b) {\n      return a - b;\n    });\n    var firstQuartile = points[Math.round(sampleSize / 4)];\n    var thirdQuartile = points[Math.round(3 * sampleSize / 4)];\n    var IQR = thirdQuartile - firstQuartile;\n    var min = firstQuartile - 1.5 * IQR;\n    var max = thirdQuartile + 1.5 * IQR;\n    var outliers = points.filter(function (p) {\n      return p < min || p > max;\n    });\n    var binWidth = 2 * IQR * Math.pow(sampleSize - outliers.length, -1 / 3);\n    var binNum = Math.round((max - min) / binWidth);\n    var actualBinWidth = (max - min) / binNum;\n    var bins = new Array(binNum + 2).fill(0);\n    var values = new Array(binNum + 2).fill(min);\n\n    for (var ii = 1; ii <= binNum; ii += 1) {\n      values[ii] += actualBinWidth * (ii - 0.5);\n    }\n\n    values[values.length - 1] = max;\n    points.filter(function (p) {\n      return p >= min && p <= max;\n    }).forEach(function (p) {\n      bins[Math.floor((p - min) / actualBinWidth) + 1] += 1;\n    });\n    var binData = values.map(function (v, index) {\n      return {\n        value: v,\n        count: bins[index]\n      };\n    });\n    var boxPlot = {\n      x: \"Statistics \" + i,\n      min: min,\n      firstQuartile: firstQuartile,\n      median: points[Math.round(sampleSize / 2)],\n      thirdQuartile: thirdQuartile,\n      max: max,\n      outliers: outliers\n    };\n    data.push({\n      boxPlot: boxPlot,\n      binData: binData\n    });\n  };\n\n  for (var i = 0; i < number; i += 1) {\n    _loop(i);\n  }\n\n  return data;\n}"]},"metadata":{},"sourceType":"script"}