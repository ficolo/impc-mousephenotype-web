{"version":3,"sources":["../../../src/metadata/PhenotypingExperimentInfobox.tsx","../../../src/charts/BoxPlot.tsx","../../src/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["d","App","name","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cafa93ec.chunk.js","sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\nlibrary.add(faQuestionCircle);\nexport const PhenotypingExperimentInfobox = ({ lifeStage, phenotypeId, phenotypeName, pipelineKey, procedureKey, procedureName, parameterKey, parameterName, strainName, phenotypingCenter }) => {\n    return (_jsx(\"table\", Object.assign({ className: \"table table-striped\" }, { children: _jsxs(\"tbody\", { children: [_jsxs(\"tr\", { children: [_jsx(\"td\", { children: \"Life stage\" }, void 0),\n                        _jsxs(\"td\", Object.assign({ className: \"font-weight-bold\" }, { children: [`${lifeStage} `, _jsx(\"a\", Object.assign({ href: `${process.env.REACT_APP_BASE_URL}/help/standardized-mouse-phenotyping/pipelines/late-adult-and-interval-pipelines/`, target: \"_blank\", rel: \"noreferrer\" }, { children: _jsx(FontAwesomeIcon, { icon: \"question-circle\" }, void 0) }), void 0)] }), void 0)] }, void 0),\n                _jsxs(\"tr\", { children: [_jsx(\"td\", { children: \"Associated Phenotype\" }, void 0),\n                        _jsx(\"td\", { children: _jsx(\"div\", { children: _jsx(\"a\", Object.assign({ className: \"font-weight-bold\", href: `${process.env.REACT_APP_BASE_URL}/data/phenotypes/${phenotypeId}` }, { children: phenotypeName }), void 0) }, void 0) }, void 0)] }, void 0),\n                _jsxs(\"tr\", { children: [_jsx(\"td\", { children: \"Testing protocol\" }, void 0),\n                        _jsx(\"td\", { children: _jsx(\"a\", Object.assign({ className: \"font-weight-bold\", href: `${process.env.REACT_APP_BASE_URL}/impress/ProcedureInfo?action=list&amp;procID=${procedureKey}&amp;pipeID=${pipelineKey}` }, { children: procedureName }), void 0) }, void 0)] }, void 0),\n                _jsxs(\"tr\", { children: [_jsx(\"td\", { children: \"Measured value\" }, void 0),\n                        _jsx(\"td\", { children: _jsx(\"a\", Object.assign({ className: \"font-weight-bold\", href: `${process.env.REACT_APP_BASE_URL}/impress/OntologyInfo?action=list&amp;procID=${procedureKey}#${parameterKey}` }, { children: parameterName }), void 0) }, void 0)] }, void 0),\n                _jsxs(\"tr\", { children: [_jsx(\"td\", { children: \"Testing environment\" }, void 0),\n                        _jsx(\"td\", { children: _jsx(\"a\", Object.assign({ className: \"font-weight-bold w-100\", \"data-toggle\": \"modal\", \"data-target\": \"#conditions\", href: \"#1\" }, { children: \"Lab conditions and equipment\" }), void 0) }, void 0)] }, void 0),\n                _jsxs(\"tr\", { children: [_jsx(\"td\", { children: \"Background Strain\" }, void 0),\n                        _jsx(\"td\", Object.assign({ className: \"font-weight-bold\" }, { children: strainName }), void 0)] }, void 0),\n                _jsxs(\"tr\", { children: [_jsx(\"td\", { children: \"Phenotyping center\" }, void 0),\n                        _jsx(\"td\", Object.assign({ className: \"font-weight-bold\" }, { children: phenotypingCenter }), void 0)] }, void 0)] }, void 0) }), void 0));\n};\n//# sourceMappingURL=PhenotypingExperimentInfobox.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Group } from \"@visx/group\";\nimport { ViolinPlot, BoxPlot } from \"@visx/stats\";\nimport { scaleBand, scaleLinear } from \"@visx/scale\";\nimport genStats from \"@visx/mock-data/lib/generators/genStats\";\nimport { withTooltip, Tooltip, defaultStyles as defaultTooltipStyles } from \"@visx/tooltip\";\nimport { PatternLines } from \"@visx/pattern\";\nimport { AnimatedAxis } from \"@visx/react-spring\";\nimport { Orientation } from \"@visx/axis\";\nimport { ParentSize } from \"@visx/responsive\";\nconst data = genStats(4);\nconsole.log(data.flatMap(d => d.boxPlot.outliers).sort((a, b) => a - b));\nconst x = (d) => d.boxPlot.x;\nconst min = (d) => d.boxPlot.min;\nconst max = (d) => d.boxPlot.max;\nconst median = (d) => d.boxPlot.median;\nconst firstQuartile = (d) => d.boxPlot.firstQuartile;\nconst thirdQuartile = (d) => d.boxPlot.thirdQuartile;\nconst outliers = (d) => d.boxPlot.outliers;\nexport default withTooltip(({ tooltipOpen, tooltipLeft, tooltipTop, tooltipData, showTooltip, hideTooltip }) => {\n    return (_jsx(ParentSize, { children: parent => {\n            const xMax = parent.width;\n            const yMax = parent.height - 100;\n            const xScale = scaleBand({\n                range: [0, xMax],\n                round: true,\n                domain: data.map(x),\n                padding: 0.8,\n            });\n            const values = data.reduce((allValues, { boxPlot }) => {\n                allValues.push(boxPlot.max, boxPlot.min, ...boxPlot.outliers);\n                return allValues;\n            }, []);\n            const minYValue = Math.min(...values);\n            const maxYValue = Math.max(...values);\n            const yScale = scaleLinear({\n                range: [yMax, 0],\n                round: true,\n                domain: [minYValue, maxYValue],\n                clamp: true,\n                nice: true\n            });\n            const boxWidth = xScale.bandwidth();\n            const constrainedWidth = boxWidth;\n            return (_jsxs(\"div\", Object.assign({ style: { position: \"relative\", padding: 20 } }, { children: [_jsxs(\"svg\", Object.assign({ width: parent.width, height: parent.height, style: { paddingTop: 10 } }, { children: [_jsx(PatternLines, { id: \"hViolinLines\", height: 3, width: 3, stroke: \"rgba(239, 121, 11, 0.325)\", strokeWidth: 1, orientation: [\"horizontal\"] }, void 0),\n                            _jsx(AnimatedAxis, { orientation: Orientation.bottom, scale: xScale, top: yMax, animationTrajectory: \"outside\" }, void 0),\n                            _jsx(AnimatedAxis, { orientation: Orientation.left, scale: yScale, left: 20, numTicks: 6, tickLabelProps: () => {\n                                    return {\n                                        verticalAnchor: \"middle\",\n                                        textAnchor: \"end\",\n                                        fontSize: 10\n                                    };\n                                }, animationTrajectory: \"outside\" }, void 0),\n                            _jsx(Group, { children: data.map((d, i) => (_jsxs(\"g\", { children: [_jsx(ViolinPlot, { data: d.binData, stroke: \"rgba(239, 121, 11, 0.325)\", left: xScale(x(d)), width: constrainedWidth, valueScale: yScale, fill: \"url(#hViolinLines)\" }, void 0),\n                                        _jsx(BoxPlot, { min: min(d), max: max(d), left: xScale(x(d)) + constrainedWidth * 0.25, firstQuartile: firstQuartile(d), thirdQuartile: thirdQuartile(d), median: median(d), boxWidth: constrainedWidth * 0.5, fill: \"rgba(239, 123, 11, 0.5)\", fillOpacity: 0.3, stroke: \"rgba(239, 123, 11, 0.5)\", strokeWidth: 2, valueScale: yScale, outliers: outliers(d), minProps: {\n                                                onMouseOver: () => {\n                                                    showTooltip({\n                                                        tooltipTop: yScale(min(d)) ?? 0 + 40,\n                                                        tooltipLeft: xScale(x(d)) + constrainedWidth + 5,\n                                                        tooltipData: {\n                                                            min: min(d),\n                                                            name: x(d)\n                                                        }\n                                                    });\n                                                },\n                                                onMouseLeave: () => {\n                                                    hideTooltip();\n                                                }\n                                            }, maxProps: {\n                                                onMouseOver: () => {\n                                                    showTooltip({\n                                                        tooltipTop: yScale(max(d)) ?? 0 + 40,\n                                                        tooltipLeft: xScale(x(d)) + constrainedWidth + 5,\n                                                        tooltipData: {\n                                                            max: max(d),\n                                                            name: x(d)\n                                                        }\n                                                    });\n                                                },\n                                                onMouseLeave: () => {\n                                                    hideTooltip();\n                                                }\n                                            }, boxProps: {\n                                                onMouseOver: () => {\n                                                    showTooltip({\n                                                        tooltipTop: yScale(median(d)) ?? 0 + 40,\n                                                        tooltipLeft: xScale(x(d)) + constrainedWidth + 5,\n                                                        tooltipData: {\n                                                            ...d.boxPlot,\n                                                            name: x(d)\n                                                        }\n                                                    });\n                                                },\n                                                onMouseLeave: () => {\n                                                    hideTooltip();\n                                                }\n                                            }, medianProps: {\n                                                style: {\n                                                    stroke: \"rgba(249, 129, 16, 0.667)\"\n                                                },\n                                                onMouseOver: () => {\n                                                    showTooltip({\n                                                        tooltipTop: yScale(median(d)) ?? 0 + 40,\n                                                        tooltipLeft: xScale(x(d)) + constrainedWidth + 5,\n                                                        tooltipData: {\n                                                            median: median(d),\n                                                            name: x(d)\n                                                        }\n                                                    });\n                                                },\n                                                onMouseLeave: () => {\n                                                    hideTooltip();\n                                                }\n                                            }, outlierProps: {\n                                                onMouseOver: ({ target }) => {\n                                                    console.log(target);\n                                                    showTooltip({\n                                                        tooltipTop: yScale(median(d)) ?? 0 + 40,\n                                                        tooltipLeft: xScale(x(d)) + constrainedWidth + 5,\n                                                        tooltipData: {\n                                                            median: median(d),\n                                                            name: x(d)\n                                                        }\n                                                    });\n                                                },\n                                                onMouseLeave: () => {\n                                                    hideTooltip();\n                                                }\n                                            } }, void 0)] }, i))) }, void 0)] }), void 0),\n                    tooltipOpen && tooltipData && (_jsxs(Tooltip, Object.assign({ top: tooltipTop, left: tooltipLeft, style: {\n                            ...defaultTooltipStyles,\n                            backgroundColor: \"#283238\",\n                            color: \"white\"\n                        } }, { children: [_jsx(\"div\", { children: _jsx(\"strong\", { children: tooltipData.name }, void 0) }, void 0),\n                            _jsxs(\"div\", Object.assign({ style: { marginTop: \"5px\", fontSize: \"12px\" } }, { children: [tooltipData.max && _jsxs(\"div\", { children: [\"max: \", tooltipData.max] }, void 0),\n                                    tooltipData.thirdQuartile && (_jsxs(\"div\", { children: [\"third quartile: \", tooltipData.thirdQuartile] }, void 0)),\n                                    tooltipData.median && (_jsxs(\"div\", { children: [\"median: \", tooltipData.median] }, void 0)),\n                                    tooltipData.firstQuartile && (_jsxs(\"div\", { children: [\"first quartile: \", tooltipData.firstQuartile] }, void 0)),\n                                    tooltipData.min && _jsxs(\"div\", { children: [\"min: \", tooltipData.min] }, void 0)] }), void 0)] }), void 0))] }), void 0));\n        } }, void 0));\n});\n//# sourceMappingURL=BoxPlot.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport \"./Header.css\";\nexport const Header = (props) => {\n    return _jsx(\"h1\", { children: props.name }, void 0);\n};\nexport * from \"./metadata/PhenotypingDatasetSummary\";\nexport * from \"./metadata/PhenotypingExperimentInfobox\";\nexport * from \"./charts/ScatterPlot\";\nexport { default as BoxPlot } from \"./charts/BoxPlot\";\nexport * from \"./charts/BarPlot\";\n//# sourceMappingURL=index.js.map","import React from \"react\";\nimport \"./App.css\";\nimport { Header } from \"@impc/components\";\n\nfunction App() {\n  return <Header name=\"Federico\"></Header>;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}